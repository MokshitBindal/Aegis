# aegis-server/routers/agent_alerts.py

"""
Router for receiving and processing alerts generated by agents.
"""

import json
import uuid
from datetime import datetime

from fastapi import APIRouter, HTTPException, Header, Request
from pydantic import BaseModel

from internal.storage.postgres import get_db_pool

router = APIRouter()


class AgentAlert(BaseModel):
    """Model for alerts generated by agents"""

    rule_name: str
    severity: str
    details: dict
    timestamp: str
    agent_id: str


@router.post("/agent-alerts")
async def receive_agent_alerts(
    request: Request,
    alerts: list[AgentAlert],
    x_aegis_agent_id: str | None = Header(None),
):
    """
    Receives alerts generated by agents and stores them in the database.

    Args:
        alerts: List of agent-generated alerts
        x_aegis_agent_id: Agent ID from request header

    Returns:
        Success message with count of stored alerts
    """
    if not x_aegis_agent_id:
        raise HTTPException(status_code=400, detail="Missing X-Aegis-Agent-ID header")

    pool = get_db_pool()

    try:
        async with pool.acquire() as conn:
            # Verify agent exists
            agent_check = await conn.fetchrow(
                "SELECT id FROM devices WHERE agent_id = $1", uuid.UUID(x_aegis_agent_id)
            )

            if not agent_check:
                raise HTTPException(
                    status_code=404, detail="Agent not found. Please register first."
                )

            # Store each alert
            stored_count = 0
            for alert in alerts:
                try:
                    # Parse timestamp
                    if isinstance(alert.timestamp, str):
                        timestamp = datetime.fromisoformat(
                            alert.timestamp.replace("Z", "+00:00")
                        )
                    else:
                        timestamp = alert.timestamp

                    # Insert alert into database
                    sql = """
                    INSERT INTO alerts (rule_name, severity, details, agent_id, created_at)
                    VALUES ($1, $2, $3, $4, $5)
                    RETURNING id
                    """

                    result = await conn.fetchrow(
                        sql,
                        alert.rule_name,
                        alert.severity,
                        json.dumps(alert.details),
                        uuid.UUID(alert.agent_id),
                        timestamp,
                    )

                    if result:
                        stored_count += 1
                        print(
                            f"Stored agent alert: {alert.rule_name} "
                            f"from {alert.agent_id} (ID: {result['id']})"
                        )

                except Exception as e:
                    print(f"Error storing individual alert: {e}")
                    # Continue processing other alerts
                    continue

            return {
                "status": "success",
                "stored_count": stored_count,
                "total_received": len(alerts),
            }

    except HTTPException:
        raise
    except Exception as e:
        print(f"Error receiving agent alerts: {e}")
        raise HTTPException(status_code=500, detail="Failed to process agent alerts")
